---
- name: Dump all vars
  debug:
    var: vars
  tags:
    - prerequisites

- name: Dump all environment vars
  debug:
    var: environment
  tags:
    - prerequisites

- name: Add the ansible ppa repository
  command: apt-add-repository -y ppa:ansible/ansible
  tags:
    - prerequisites

- name: Update all packages
  apt:
    update_cache: yes
  tags:
    - prerequisites

- name: Set up machine hostname
  hostname:
    name: "{{ liquid_domain.split('.')[0] }}"
  tags:
    - configure

- name: Put hostname in /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: '127.0.0.1 {{ liquid_domain.split(".")[0] }}'
    state: present
  tags:
    - configure

- name: Install base packages
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
    - sudo
    - curl
    - git
    - apt-transport-https
    - supervisor
    - nginx
    - python3
    - virtualenv
    - iptables
    - build-essential
    - default-jre-headless
    - postgresql
    - postgresql-contrib
    - postgresql-server-dev-all
    - python-psycopg2 # so that ansible can manage postgres users and dbs
    - openssh-server
  tags:
    - prerequisites

- name: Install ansible 2.4
  apt:
    name: "ansible=2.4*"
  tags:
    - prerequisites

- name: Remove cloud-init if it's installed
  apt:
    name: cloud-init
    state: absent
    purge: yes
  tags:
    - prerequisites

- name: apt-get clean
  command: apt-get -y clean

- name: Disable ubuntu apt auto-update services
  service:
    name: "{{ item }}"
    enabled: no
  with_items:
    - apt-daily.service
    - apt-daily.timer
  tags:
    - prerequisites

- name: Uninstall the debian unattended-upgrades package
  apt:
    name: unattended-upgrades
    state: absent
    purge: yes
  tags:
    - prerequisites

- name: Enable supervisor
  service:
    name: supervisor
    enabled: yes

- name: Create liquid-apps system user
  user:
    name: liquid-apps
    shell: /bin/false

- name: Create liquid-admin system user
  user:
    name: liquid-admin
    shell: /bin/bash

- name: Add the liquid-apps user to the sudo group
  command: adduser liquid-apps sudo

- name: Add the liquid-admin user to the sudo group
  command: adduser liquid-admin sudo

- name: Configure passwordless sudo for liquid-admin
  copy:
    content: "liquid-admin ALL=(ALL:ALL) NOPASSWD: ALL\n"
    dest: /etc/sudoers.d/liquid-admin

- name: Disable the root user login
  command: passwd -l root

- name: Create the supervisor global config
  template:
    src: supervisor/supervisor.conf
    dest: /etc/supervisor/supervisor.conf

- name: Create /var/lib/liquid directory structure
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - /var/lib/liquid
    - /var/lib/liquid/conf
    - /var/lib/liquid/https
    - /var/lib/liquid/https/nginx
    - /var/lib/liquid/https/certs

- name: Put configuration in /var/lib/liquid/conf/options.json
  template:
    src: options.json
    dest: /var/lib/liquid/conf/options.json
  tags:
    - configure
    - configure-vpn

- name: Create common folder
  file:
    path: /opt/common
    state: directory
    mode: 0755

- name: Create the initialization script
  template:
    src: initialize.sh
    dest: /opt/common/initialize.sh
    mode: 0755

- name: Create folder for init scripts of other modules
  file:
    path: /opt/common/initialize.d
    state: directory
    mode: 0755

- name: Create /opt/common/libexec directory
  file:
    path: /opt/common/libexec
    state: directory

- import_tasks: tasks/hooks.yml

- name: Create the common first boot script
  copy:
    src: first-boot.d/common
    dest: /opt/common/hooks/first-boot.d/00-common
    mode: 0755

- name: Create the boot script
  template:
    src: boot.sh
    dest: /opt/common/boot.sh
    mode: 0755

- name: Start boot script
  lineinfile:
    dest: /etc/rc.local
    insertbefore: "exit 0"
    line: "/opt/setup/libexec/boot"

- name: Nginx hash bucket size
  lineinfile:
    dest: /etc/nginx/nginx.conf
    regexp: 'server_names_hash_bucket_size'
    line: '	server_names_hash_bucket_size 64;'

- name: nginx default site conf
  template:
    src: nginx/default
    dest: /etc/nginx/sites-enabled/default

- name: remove default nginx site html page
  file:
    path: "/var/www/html/{{ item }}"
    state: absent
  with_fileglob:
    - "index.*.html"

- name: nginx default site html page
  template:
    src: nginx/index.html
    dest: /var/www/html/index.html
  tags:
    - configure

- name: nginx https settings
  copy:
    src: nginx/https.conf
    dest: /var/lib/liquid/https/nginx/https.conf

- name: Reload nginx after starting services
  copy:
    src: initialize.d/99-nginx-reload.sh
    dest: /opt/common/initialize.d/99-nginx-reload.sh
    mode: 0755

- import_tasks: tasks/sshd.yml

- name: Create the firewall script
  copy:
    src: libexec/firewall
    dest: /opt/common/libexec/firewall
    mode: 0755

- when: ansible_architecture == 'x86_64'
  name: "Cloud: Set up ens3 interface as dhcp"
  copy:
    content: "auto ens3\niface ens3 inet dhcp\n"
    dest: /etc/network/interfaces.d/ens3.cfg

- name: Clone the setup repo in /opt/setup
  git:
    repo: https://github.com/liquidinvestigations/setup.git
    dest: /opt/setup
    version: "{{ git_repo_versions.setup }}"

- name: Create /etc/systemd/system/getty@.service.d directory
  file:
    path: /etc/systemd/system/getty@.service.d
    state: directory

- name: Don't clear tty1 after boot
  copy:
    content: "[Service]\nTTYVTDisallocate=no\n"
    dest: /etc/systemd/system/getty@.service.d/noclear.conf

- name: Disable first-boot partition resizing on odroids
  file:
    path: /aafirstboot
    state: absent
