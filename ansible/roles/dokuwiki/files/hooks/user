#!/usr/bin/env python3

from collections import OrderedDict
import codecs
import hashlib
import json
from argparse import ArgumentParser
from pathlib import Path
import os


def ssha(pw):
    salt = os.urandom(4)
    sha = hashlib.sha1(pw.encode('utf-8') + salt).digest()
    hash_b64 = codecs.encode((sha + salt), 'base64').decode('latin1').strip()
    hash = '{SSHA}' + hash_b64
    return hash


class UsersFile:

    def __init__(self, path):
        self._path = path
        (self._users, self._header) = self._load()

    def _open(self, mode='r'):
        return self._path.open(mode, encoding='latin1')

    def _load(self):
        header_lines = []
        users = OrderedDict()

        with self._open() as f:
            for raw_line in f:
                line = raw_line.split('#')[0].strip()
                if line:
                    (username, pw_hash, name, email, roles) = line.split(':')
                    users[username] = {
                        'pw_hash': pw_hash,
                        'name': name,
                        'email': email,
                        'roles': roles,
                    }

                else:
                    header_lines.append(raw_line)

        header = ''.join(header_lines)
        return users, header

    def _userline(self, username, pw_hash, name, email, roles):
        return '{}:{}:{}:{}:{}\n'.format(username, pw_hash, name, email, roles)

    def _save(self):
        with self._open('w') as f:
            f.write(self._header)
            for username, data in self._users.items():
                userline = self._userline(username, **data)
                f.write(userline)

    def create(self, username, pw):
        if username in self._users:
            return self.set_password(username, pw)

        self._users[username] = {
            'pw_hash': ssha(pw),
            'name': username,
            'email': "{}@localhost".format(username),
            'roles': 'admin,user',
        }
        self._save()

    def set_password(self, username, pw):
        self._users[username]['pw_hash'] = ssha(pw)
        self._save()

    def delete(self, username):
        del self._users[username]
        self._save()


def main():
    volume = Path('/var/lib/docker/volumes/dokuwiki_dokuwiki')
    users = UsersFile(volume / '_data/conf/users.auth.php')

    def created(options):
        pw = json.loads(os.environ['LIQUID_HOOK_DATA'])['password']
        users.create(options.username, pw)

    def password(options):
        pw = json.loads(os.environ['LIQUID_HOOK_DATA'])['password']
        users.set_password(options.username, pw)

    def deleted(options):
        users.delete(options.username)

    hooks = {
        'user-{}'.format(fn.__name__): fn
        for fn in [created, password, deleted]
    }

    parser = ArgumentParser()
    parser.add_argument('username')
    options = parser.parse_args()
    hook = os.environ['HOOK']
    hooks[hook](options)


if __name__ == '__main__':
    main()
